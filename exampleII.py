# -*- coding: utf-8 -*-
"""DiamondSpaceExampleII.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ms7aHDozJEok2ytWuPD63i_hdUrT5KG_
"""

import numpy as np
import accumulator as ac
import matplotlib.pyplot as plt
from matplotlib import collections  as mc

##
# generate N random lines around random point P
N = 100
P = np.random.randint(0,2000000000,3)
W = np.random.random(N)
P[2] = 1
X = np.tile(P,(N,1))
Y = np.random.rand(N,3)*100 - 50
Y[:,2] = 0
Y = Y + X
lines = np.cross(X,Y)
print("Random point:",P)
##
# function for plotting generated lines
def draw_lines(lines, w, ax):
  num = lines.shape[0]

  x0 = np.array([1, 0, 0])
  x1 = np.array([1, 0, -200])
  y0 = np.array([0, 1, 0])
  y1 = np.array([0, 1, -200])

  p_x0 = np.cross(np.tile(x0, (num, 1)), lines)
  p_x1 = np.cross(np.tile(x1, (num, 1)), lines)
  p_y0 = np.cross(np.tile(y0, (num, 1)), lines)
  p_y1 = np.cross(np.tile(y1, (num, 1)), lines)

  p_x0 = p_x0 / p_x0[:, 2].reshape(-1, 1)
  p_x1 = p_x1 / p_x1[:, 2].reshape(-1, 1)
  p_y0 = p_y0 / p_y0[:, 2].reshape(-1, 1)
  p_y1 = p_y1 / p_y1[:, 2].reshape(-1, 1)

  theta = np.arctan2(lines[:, 1], lines[:, 0])
  horizontal = np.abs(np.sin(theta)) > np.sqrt(2) / 2

  lin_seg = np.ndarray([num, 2, 2])
  lin_seg[horizontal, 0, 0:2] = p_x0[horizontal, 0:2]
  lin_seg[horizontal, 1, 0:2] = p_x1[horizontal, 0:2]
  lin_seg[~horizontal, 0, 0:2] = p_y0[~horizontal, 0:2]
  lin_seg[~horizontal, 1, 0:2] = p_y1[~horizontal, 0:2]

  colors = np.ones([num, 4]) * 0.5
  colors[:, 3] = w

  lc = mc.LineCollection(lin_seg, colors=colors, linewidths=1, zorder=1)
  ax.add_collection(lc)

  ax.set(xlim=(0, 200), ylim=(0, 200))
##
# create Diamond space, accumulate lines and find peaks
d = 5000000000
size = 128
DS = ac.DiamondSpace(d, size)
DS.insert(lines)

peaks, weights, peaks_ds = DS.find_peaks(min_dist=2, prominence=2, t=0.8)
##
# draw accumulator with detected max peaks (peaks_ds) and original image with reprojected peaks (peaks)
_,ax = plt.subplots(1,2, figsize=(10,5))

ax[0].imshow(np.sqrt(DS.attach_spaces()), cmap="Greys", extent = (-DS.size,DS.size,DS.size,-DS.size))
ax[0].set(title="Accumulator", xticks=np.linspace(-DS.size,DS.size,5), yticks=np.linspace(-DS.size,DS.size,5))
ax[0].plot(peaks_ds[:,0],peaks_ds[:,1],"*",c = "red")
ax[0].invert_yaxis()

draw_lines(lines,W, ax[1])
ax[1].plot(peaks[:,0],peaks[:,1],"*",c = "red")
ax[1].set(title="Lines", xticks=[], yticks=[])

print("Generated point:",P)
print("Detected point:",peaks)

##
# create Diamond space, accumulate lines and find peaks
d = 100
size = 128
DS = ac.DiamondSpace(d, size)
DS.insert(lines)
DSW = ac.DiamondSpace(d, size)
DSW.insert(lines,W)

##
# draw accumulator with detected max peaks (peaks_ds) and original image with reprojected peaks (peaks)
_,ax = plt.subplots(1,2, figsize=(10,5))

ax[0].imshow(DS.attach_spaces(), cmap="Greys", extent = (-DS.size,DS.size,DS.size,-DS.size))
ax[0].set(title="Accumulator", xticks=np.linspace(-DS.size,DS.size,5), yticks=np.linspace(-DS.size,DS.size,5))
ax[0].invert_yaxis()

ax[1].imshow(DSW.attach_spaces(), cmap="Greys", extent = (-DS.size,DS.size,DS.size,-DS.size))
ax[1].set(title="Accumulator", xticks=np.linspace(-DS.size,DS.size,5), yticks=np.linspace(-DS.size,DS.size,5))
ax[1].invert_yaxis()

